//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace V25Emulator {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Configuration")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Configuration : System.Data.DataSet {
        
        private DeviceDataTable tableDevice;
        
        private SendPacketDataDataTable tableSendPacketData;
        
        private ResponsePacketDataDataTable tableResponsePacketData;
        
        private RS232ConfigDataTable tableRS232Config;
        
        private VersionDataTable tableVersion;
        
        private PollingQDataTable tablePollingQ;
        
        private ShortCutButtonDataTable tableShortCutButton;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Configuration() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Configuration(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Device"] != null)) {
                    base.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
                }
                if ((ds.Tables["SendPacketData"] != null)) {
                    base.Tables.Add(new SendPacketDataDataTable(ds.Tables["SendPacketData"]));
                }
                if ((ds.Tables["ResponsePacketData"] != null)) {
                    base.Tables.Add(new ResponsePacketDataDataTable(ds.Tables["ResponsePacketData"]));
                }
                if ((ds.Tables["RS232Config"] != null)) {
                    base.Tables.Add(new RS232ConfigDataTable(ds.Tables["RS232Config"]));
                }
                if ((ds.Tables["Version"] != null)) {
                    base.Tables.Add(new VersionDataTable(ds.Tables["Version"]));
                }
                if ((ds.Tables["PollingQ"] != null)) {
                    base.Tables.Add(new PollingQDataTable(ds.Tables["PollingQ"]));
                }
                if ((ds.Tables["ShortCutButton"] != null)) {
                    base.Tables.Add(new ShortCutButtonDataTable(ds.Tables["ShortCutButton"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeviceDataTable Device {
            get {
                return this.tableDevice;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SendPacketDataDataTable SendPacketData {
            get {
                return this.tableSendPacketData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResponsePacketDataDataTable ResponsePacketData {
            get {
                return this.tableResponsePacketData;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RS232ConfigDataTable RS232Config {
            get {
                return this.tableRS232Config;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VersionDataTable Version {
            get {
                return this.tableVersion;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PollingQDataTable PollingQ {
            get {
                return this.tablePollingQ;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShortCutButtonDataTable ShortCutButton {
            get {
                return this.tableShortCutButton;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            Configuration cln = ((Configuration)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Device"] != null)) {
                    base.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
                }
                if ((ds.Tables["SendPacketData"] != null)) {
                    base.Tables.Add(new SendPacketDataDataTable(ds.Tables["SendPacketData"]));
                }
                if ((ds.Tables["ResponsePacketData"] != null)) {
                    base.Tables.Add(new ResponsePacketDataDataTable(ds.Tables["ResponsePacketData"]));
                }
                if ((ds.Tables["RS232Config"] != null)) {
                    base.Tables.Add(new RS232ConfigDataTable(ds.Tables["RS232Config"]));
                }
                if ((ds.Tables["Version"] != null)) {
                    base.Tables.Add(new VersionDataTable(ds.Tables["Version"]));
                }
                if ((ds.Tables["PollingQ"] != null)) {
                    base.Tables.Add(new PollingQDataTable(ds.Tables["PollingQ"]));
                }
                if ((ds.Tables["ShortCutButton"] != null)) {
                    base.Tables.Add(new ShortCutButtonDataTable(ds.Tables["ShortCutButton"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDevice = ((DeviceDataTable)(base.Tables["Device"]));
            if ((initTable == true)) {
                if ((this.tableDevice != null)) {
                    this.tableDevice.InitVars();
                }
            }
            this.tableSendPacketData = ((SendPacketDataDataTable)(base.Tables["SendPacketData"]));
            if ((initTable == true)) {
                if ((this.tableSendPacketData != null)) {
                    this.tableSendPacketData.InitVars();
                }
            }
            this.tableResponsePacketData = ((ResponsePacketDataDataTable)(base.Tables["ResponsePacketData"]));
            if ((initTable == true)) {
                if ((this.tableResponsePacketData != null)) {
                    this.tableResponsePacketData.InitVars();
                }
            }
            this.tableRS232Config = ((RS232ConfigDataTable)(base.Tables["RS232Config"]));
            if ((initTable == true)) {
                if ((this.tableRS232Config != null)) {
                    this.tableRS232Config.InitVars();
                }
            }
            this.tableVersion = ((VersionDataTable)(base.Tables["Version"]));
            if ((initTable == true)) {
                if ((this.tableVersion != null)) {
                    this.tableVersion.InitVars();
                }
            }
            this.tablePollingQ = ((PollingQDataTable)(base.Tables["PollingQ"]));
            if ((initTable == true)) {
                if ((this.tablePollingQ != null)) {
                    this.tablePollingQ.InitVars();
                }
            }
            this.tableShortCutButton = ((ShortCutButtonDataTable)(base.Tables["ShortCutButton"]));
            if ((initTable == true)) {
                if ((this.tableShortCutButton != null)) {
                    this.tableShortCutButton.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Configuration";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Configuration.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDevice = new DeviceDataTable();
            base.Tables.Add(this.tableDevice);
            this.tableSendPacketData = new SendPacketDataDataTable();
            base.Tables.Add(this.tableSendPacketData);
            this.tableResponsePacketData = new ResponsePacketDataDataTable();
            base.Tables.Add(this.tableResponsePacketData);
            this.tableRS232Config = new RS232ConfigDataTable();
            base.Tables.Add(this.tableRS232Config);
            this.tableVersion = new VersionDataTable();
            base.Tables.Add(this.tableVersion);
            this.tablePollingQ = new PollingQDataTable();
            base.Tables.Add(this.tablePollingQ);
            this.tableShortCutButton = new ShortCutButtonDataTable();
            base.Tables.Add(this.tableShortCutButton);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDevice() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSendPacketData() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResponsePacketData() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRS232Config() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVersion() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePollingQ() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeShortCutButton() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Configuration ds = new Configuration();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DeviceRowChangeEventHandler(object sender, DeviceRowChangeEvent e);
        
        public delegate void SendPacketDataRowChangeEventHandler(object sender, SendPacketDataRowChangeEvent e);
        
        public delegate void ResponsePacketDataRowChangeEventHandler(object sender, ResponsePacketDataRowChangeEvent e);
        
        public delegate void RS232ConfigRowChangeEventHandler(object sender, RS232ConfigRowChangeEvent e);
        
        public delegate void VersionRowChangeEventHandler(object sender, VersionRowChangeEvent e);
        
        public delegate void PollingQRowChangeEventHandler(object sender, PollingQRowChangeEvent e);
        
        public delegate void ShortCutButtonRowChangeEventHandler(object sender, ShortCutButtonRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeviceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnCommand;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceDataTable() {
                this.TableName = "Device";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeviceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommandColumn {
                get {
                    return this.columnCommand;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow this[int index] {
                get {
                    return ((DeviceRow)(this.Rows[index]));
                }
            }
            
            public event DeviceRowChangeEventHandler DeviceRowChanging;
            
            public event DeviceRowChangeEventHandler DeviceRowChanged;
            
            public event DeviceRowChangeEventHandler DeviceRowDeleting;
            
            public event DeviceRowChangeEventHandler DeviceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeviceRow(DeviceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow AddDeviceRow(string Address, string Command, string Description) {
                DeviceRow rowDeviceRow = ((DeviceRow)(this.NewRow()));
                rowDeviceRow.ItemArray = new object[] {
                        null,
                        Address,
                        Command,
                        Description};
                this.Rows.Add(rowDeviceRow);
                return rowDeviceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DeviceDataTable cln = ((DeviceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DeviceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnAddress = base.Columns["Address"];
                this.columnCommand = base.Columns["Command"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCommand = new System.Data.DataColumn("Command", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommand);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow NewDeviceRow() {
                return ((DeviceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DeviceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DeviceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeviceRowChanged != null)) {
                    this.DeviceRowChanged(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeviceRowChanging != null)) {
                    this.DeviceRowChanging(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeviceRowDeleted != null)) {
                    this.DeviceRowDeleted(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeviceRowDeleting != null)) {
                    this.DeviceRowDeleting(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeviceRow(DeviceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Configuration ds = new Configuration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeviceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SendPacketDataDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnCodeTag;
            
            private System.Data.DataColumn columnByteNo;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnDataTag;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SendPacketDataDataTable() {
                this.TableName = "SendPacketData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SendPacketDataDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SendPacketDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeTagColumn {
                get {
                    return this.columnCodeTag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ByteNoColumn {
                get {
                    return this.columnByteNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataTagColumn {
                get {
                    return this.columnDataTag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SendPacketDataRow this[int index] {
                get {
                    return ((SendPacketDataRow)(this.Rows[index]));
                }
            }
            
            public event SendPacketDataRowChangeEventHandler SendPacketDataRowChanging;
            
            public event SendPacketDataRowChangeEventHandler SendPacketDataRowChanged;
            
            public event SendPacketDataRowChangeEventHandler SendPacketDataRowDeleting;
            
            public event SendPacketDataRowChangeEventHandler SendPacketDataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSendPacketDataRow(SendPacketDataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SendPacketDataRow AddSendPacketDataRow(int Id, string CodeTag, int ByteNo, string Description, string DataTag) {
                SendPacketDataRow rowSendPacketDataRow = ((SendPacketDataRow)(this.NewRow()));
                rowSendPacketDataRow.ItemArray = new object[] {
                        Id,
                        CodeTag,
                        ByteNo,
                        Description,
                        DataTag};
                this.Rows.Add(rowSendPacketDataRow);
                return rowSendPacketDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SendPacketDataDataTable cln = ((SendPacketDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SendPacketDataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnCodeTag = base.Columns["CodeTag"];
                this.columnByteNo = base.Columns["ByteNo"];
                this.columnDescription = base.Columns["Description"];
                this.columnDataTag = base.Columns["DataTag"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnCodeTag = new System.Data.DataColumn("CodeTag", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodeTag);
                this.columnByteNo = new System.Data.DataColumn("ByteNo", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnByteNo);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDataTag = new System.Data.DataColumn("DataTag", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataTag);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SendPacketDataRow NewSendPacketDataRow() {
                return ((SendPacketDataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SendPacketDataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SendPacketDataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SendPacketDataRowChanged != null)) {
                    this.SendPacketDataRowChanged(this, new SendPacketDataRowChangeEvent(((SendPacketDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SendPacketDataRowChanging != null)) {
                    this.SendPacketDataRowChanging(this, new SendPacketDataRowChangeEvent(((SendPacketDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SendPacketDataRowDeleted != null)) {
                    this.SendPacketDataRowDeleted(this, new SendPacketDataRowChangeEvent(((SendPacketDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SendPacketDataRowDeleting != null)) {
                    this.SendPacketDataRowDeleting(this, new SendPacketDataRowChangeEvent(((SendPacketDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSendPacketDataRow(SendPacketDataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Configuration ds = new Configuration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SendPacketDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResponsePacketDataDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnCodeTag;
            
            private System.Data.DataColumn columnByteNo;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnDataTag;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsePacketDataDataTable() {
                this.TableName = "ResponsePacketData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResponsePacketDataDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResponsePacketDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeTagColumn {
                get {
                    return this.columnCodeTag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ByteNoColumn {
                get {
                    return this.columnByteNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataTagColumn {
                get {
                    return this.columnDataTag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsePacketDataRow this[int index] {
                get {
                    return ((ResponsePacketDataRow)(this.Rows[index]));
                }
            }
            
            public event ResponsePacketDataRowChangeEventHandler ResponsePacketDataRowChanging;
            
            public event ResponsePacketDataRowChangeEventHandler ResponsePacketDataRowChanged;
            
            public event ResponsePacketDataRowChangeEventHandler ResponsePacketDataRowDeleting;
            
            public event ResponsePacketDataRowChangeEventHandler ResponsePacketDataRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResponsePacketDataRow(ResponsePacketDataRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsePacketDataRow AddResponsePacketDataRow(int Id, string CodeTag, int ByteNo, string Description, string DataTag) {
                ResponsePacketDataRow rowResponsePacketDataRow = ((ResponsePacketDataRow)(this.NewRow()));
                rowResponsePacketDataRow.ItemArray = new object[] {
                        Id,
                        CodeTag,
                        ByteNo,
                        Description,
                        DataTag};
                this.Rows.Add(rowResponsePacketDataRow);
                return rowResponsePacketDataRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ResponsePacketDataDataTable cln = ((ResponsePacketDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ResponsePacketDataDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnCodeTag = base.Columns["CodeTag"];
                this.columnByteNo = base.Columns["ByteNo"];
                this.columnDescription = base.Columns["Description"];
                this.columnDataTag = base.Columns["DataTag"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnCodeTag = new System.Data.DataColumn("CodeTag", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodeTag);
                this.columnByteNo = new System.Data.DataColumn("ByteNo", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnByteNo);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDataTag = new System.Data.DataColumn("DataTag", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataTag);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsePacketDataRow NewResponsePacketDataRow() {
                return ((ResponsePacketDataRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ResponsePacketDataRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ResponsePacketDataRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResponsePacketDataRowChanged != null)) {
                    this.ResponsePacketDataRowChanged(this, new ResponsePacketDataRowChangeEvent(((ResponsePacketDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResponsePacketDataRowChanging != null)) {
                    this.ResponsePacketDataRowChanging(this, new ResponsePacketDataRowChangeEvent(((ResponsePacketDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResponsePacketDataRowDeleted != null)) {
                    this.ResponsePacketDataRowDeleted(this, new ResponsePacketDataRowChangeEvent(((ResponsePacketDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResponsePacketDataRowDeleting != null)) {
                    this.ResponsePacketDataRowDeleting(this, new ResponsePacketDataRowChangeEvent(((ResponsePacketDataRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResponsePacketDataRow(ResponsePacketDataRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Configuration ds = new Configuration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResponsePacketDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RS232ConfigDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPort;
            
            private System.Data.DataColumn columnBaud;
            
            private System.Data.DataColumn columnDataBits;
            
            private System.Data.DataColumn columnStopBits;
            
            private System.Data.DataColumn columnParity;
            
            private System.Data.DataColumn columnResponseDelay;
            
            private System.Data.DataColumn columnInterCharGap;
            
            private System.Data.DataColumn columnPollingInterval;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RS232ConfigDataTable() {
                this.TableName = "RS232Config";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RS232ConfigDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RS232ConfigDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PortColumn {
                get {
                    return this.columnPort;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BaudColumn {
                get {
                    return this.columnBaud;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataBitsColumn {
                get {
                    return this.columnDataBits;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StopBitsColumn {
                get {
                    return this.columnStopBits;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ParityColumn {
                get {
                    return this.columnParity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResponseDelayColumn {
                get {
                    return this.columnResponseDelay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InterCharGapColumn {
                get {
                    return this.columnInterCharGap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PollingIntervalColumn {
                get {
                    return this.columnPollingInterval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RS232ConfigRow this[int index] {
                get {
                    return ((RS232ConfigRow)(this.Rows[index]));
                }
            }
            
            public event RS232ConfigRowChangeEventHandler RS232ConfigRowChanging;
            
            public event RS232ConfigRowChangeEventHandler RS232ConfigRowChanged;
            
            public event RS232ConfigRowChangeEventHandler RS232ConfigRowDeleting;
            
            public event RS232ConfigRowChangeEventHandler RS232ConfigRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRS232ConfigRow(RS232ConfigRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RS232ConfigRow AddRS232ConfigRow(string Port, string Baud, int DataBits, string StopBits, string Parity, string ResponseDelay, string InterCharGap, string PollingInterval) {
                RS232ConfigRow rowRS232ConfigRow = ((RS232ConfigRow)(this.NewRow()));
                rowRS232ConfigRow.ItemArray = new object[] {
                        Port,
                        Baud,
                        DataBits,
                        StopBits,
                        Parity,
                        ResponseDelay,
                        InterCharGap,
                        PollingInterval};
                this.Rows.Add(rowRS232ConfigRow);
                return rowRS232ConfigRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RS232ConfigDataTable cln = ((RS232ConfigDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RS232ConfigDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPort = base.Columns["Port"];
                this.columnBaud = base.Columns["Baud"];
                this.columnDataBits = base.Columns["DataBits"];
                this.columnStopBits = base.Columns["StopBits"];
                this.columnParity = base.Columns["Parity"];
                this.columnResponseDelay = base.Columns["ResponseDelay"];
                this.columnInterCharGap = base.Columns["InterCharGap"];
                this.columnPollingInterval = base.Columns["PollingInterval"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPort = new System.Data.DataColumn("Port", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPort);
                this.columnBaud = new System.Data.DataColumn("Baud", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaud);
                this.columnDataBits = new System.Data.DataColumn("DataBits", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataBits);
                this.columnStopBits = new System.Data.DataColumn("StopBits", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopBits);
                this.columnParity = new System.Data.DataColumn("Parity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParity);
                this.columnResponseDelay = new System.Data.DataColumn("ResponseDelay", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponseDelay);
                this.columnInterCharGap = new System.Data.DataColumn("InterCharGap", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterCharGap);
                this.columnPollingInterval = new System.Data.DataColumn("PollingInterval", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPollingInterval);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RS232ConfigRow NewRS232ConfigRow() {
                return ((RS232ConfigRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RS232ConfigRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RS232ConfigRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RS232ConfigRowChanged != null)) {
                    this.RS232ConfigRowChanged(this, new RS232ConfigRowChangeEvent(((RS232ConfigRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RS232ConfigRowChanging != null)) {
                    this.RS232ConfigRowChanging(this, new RS232ConfigRowChangeEvent(((RS232ConfigRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RS232ConfigRowDeleted != null)) {
                    this.RS232ConfigRowDeleted(this, new RS232ConfigRowChangeEvent(((RS232ConfigRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RS232ConfigRowDeleting != null)) {
                    this.RS232ConfigRowDeleting(this, new RS232ConfigRowChangeEvent(((RS232ConfigRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRS232ConfigRow(RS232ConfigRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Configuration ds = new Configuration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RS232ConfigDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VersionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersionDataTable() {
                this.TableName = "Version";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VersionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VersionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersionRow this[int index] {
                get {
                    return ((VersionRow)(this.Rows[index]));
                }
            }
            
            public event VersionRowChangeEventHandler VersionRowChanging;
            
            public event VersionRowChangeEventHandler VersionRowChanged;
            
            public event VersionRowChangeEventHandler VersionRowDeleting;
            
            public event VersionRowChangeEventHandler VersionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVersionRow(VersionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersionRow AddVersionRow(string Version) {
                VersionRow rowVersionRow = ((VersionRow)(this.NewRow()));
                rowVersionRow.ItemArray = new object[] {
                        Version};
                this.Rows.Add(rowVersionRow);
                return rowVersionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VersionDataTable cln = ((VersionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VersionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVersion = base.Columns["Version"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVersion = new System.Data.DataColumn("Version", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersionRow NewVersionRow() {
                return ((VersionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VersionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VersionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VersionRowChanged != null)) {
                    this.VersionRowChanged(this, new VersionRowChangeEvent(((VersionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VersionRowChanging != null)) {
                    this.VersionRowChanging(this, new VersionRowChangeEvent(((VersionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VersionRowDeleted != null)) {
                    this.VersionRowDeleted(this, new VersionRowChangeEvent(((VersionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VersionRowDeleting != null)) {
                    this.VersionRowDeleting(this, new VersionRowChangeEvent(((VersionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVersionRow(VersionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Configuration ds = new Configuration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VersionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PollingQDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PollingQDataTable() {
                this.TableName = "PollingQ";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PollingQDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PollingQDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PollingQRow this[int index] {
                get {
                    return ((PollingQRow)(this.Rows[index]));
                }
            }
            
            public event PollingQRowChangeEventHandler PollingQRowChanging;
            
            public event PollingQRowChangeEventHandler PollingQRowChanged;
            
            public event PollingQRowChangeEventHandler PollingQRowDeleting;
            
            public event PollingQRowChangeEventHandler PollingQRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPollingQRow(PollingQRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PollingQRow AddPollingQRow(string Data) {
                PollingQRow rowPollingQRow = ((PollingQRow)(this.NewRow()));
                rowPollingQRow.ItemArray = new object[] {
                        Data};
                this.Rows.Add(rowPollingQRow);
                return rowPollingQRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PollingQDataTable cln = ((PollingQDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PollingQDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnData = base.Columns["Data"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnData = new System.Data.DataColumn("Data", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PollingQRow NewPollingQRow() {
                return ((PollingQRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PollingQRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PollingQRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PollingQRowChanged != null)) {
                    this.PollingQRowChanged(this, new PollingQRowChangeEvent(((PollingQRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PollingQRowChanging != null)) {
                    this.PollingQRowChanging(this, new PollingQRowChangeEvent(((PollingQRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PollingQRowDeleted != null)) {
                    this.PollingQRowDeleted(this, new PollingQRowChangeEvent(((PollingQRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PollingQRowDeleting != null)) {
                    this.PollingQRowDeleting(this, new PollingQRowChangeEvent(((PollingQRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePollingQRow(PollingQRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Configuration ds = new Configuration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PollingQDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ShortCutButtonDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnButtonId;
            
            private System.Data.DataColumn columnButtonText;
            
            private System.Data.DataColumn columnData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShortCutButtonDataTable() {
                this.TableName = "ShortCutButton";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ShortCutButtonDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ShortCutButtonDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ButtonIdColumn {
                get {
                    return this.columnButtonId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ButtonTextColumn {
                get {
                    return this.columnButtonText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShortCutButtonRow this[int index] {
                get {
                    return ((ShortCutButtonRow)(this.Rows[index]));
                }
            }
            
            public event ShortCutButtonRowChangeEventHandler ShortCutButtonRowChanging;
            
            public event ShortCutButtonRowChangeEventHandler ShortCutButtonRowChanged;
            
            public event ShortCutButtonRowChangeEventHandler ShortCutButtonRowDeleting;
            
            public event ShortCutButtonRowChangeEventHandler ShortCutButtonRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddShortCutButtonRow(ShortCutButtonRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShortCutButtonRow AddShortCutButtonRow(int ButtonId, string ButtonText, string Data) {
                ShortCutButtonRow rowShortCutButtonRow = ((ShortCutButtonRow)(this.NewRow()));
                rowShortCutButtonRow.ItemArray = new object[] {
                        ButtonId,
                        ButtonText,
                        Data};
                this.Rows.Add(rowShortCutButtonRow);
                return rowShortCutButtonRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ShortCutButtonDataTable cln = ((ShortCutButtonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ShortCutButtonDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnButtonId = base.Columns["ButtonId"];
                this.columnButtonText = base.Columns["ButtonText"];
                this.columnData = base.Columns["Data"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnButtonId = new System.Data.DataColumn("ButtonId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnButtonId);
                this.columnButtonText = new System.Data.DataColumn("ButtonText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnButtonText);
                this.columnData = new System.Data.DataColumn("Data", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShortCutButtonRow NewShortCutButtonRow() {
                return ((ShortCutButtonRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ShortCutButtonRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ShortCutButtonRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShortCutButtonRowChanged != null)) {
                    this.ShortCutButtonRowChanged(this, new ShortCutButtonRowChangeEvent(((ShortCutButtonRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShortCutButtonRowChanging != null)) {
                    this.ShortCutButtonRowChanging(this, new ShortCutButtonRowChangeEvent(((ShortCutButtonRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShortCutButtonRowDeleted != null)) {
                    this.ShortCutButtonRowDeleted(this, new ShortCutButtonRowChangeEvent(((ShortCutButtonRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShortCutButtonRowDeleting != null)) {
                    this.ShortCutButtonRowDeleting(this, new ShortCutButtonRowChangeEvent(((ShortCutButtonRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveShortCutButtonRow(ShortCutButtonRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Configuration ds = new Configuration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ShortCutButtonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeviceRow : System.Data.DataRow {
            
            private DeviceDataTable tableDevice;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDevice = ((DeviceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableDevice.IdColumn]));
                }
                set {
                    this[this.tableDevice.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableDevice.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Address\' in table \'Device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevice.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Command {
                get {
                    try {
                        return ((string)(this[this.tableDevice.CommandColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Command\' in table \'Device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevice.CommandColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableDevice.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'Device\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevice.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableDevice.AddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableDevice.AddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommandNull() {
                return this.IsNull(this.tableDevice.CommandColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommandNull() {
                this[this.tableDevice.CommandColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableDevice.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableDevice.DescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SendPacketDataRow : System.Data.DataRow {
            
            private SendPacketDataDataTable tableSendPacketData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SendPacketDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSendPacketData = ((SendPacketDataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    try {
                        return ((int)(this[this.tableSendPacketData.IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Id\' in table \'SendPacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSendPacketData.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodeTag {
                get {
                    try {
                        return ((string)(this[this.tableSendPacketData.CodeTagColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CodeTag\' in table \'SendPacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSendPacketData.CodeTagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ByteNo {
                get {
                    try {
                        return ((int)(this[this.tableSendPacketData.ByteNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ByteNo\' in table \'SendPacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSendPacketData.ByteNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSendPacketData.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'SendPacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSendPacketData.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataTag {
                get {
                    try {
                        return ((string)(this[this.tableSendPacketData.DataTagColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataTag\' in table \'SendPacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSendPacketData.DataTagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableSendPacketData.IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableSendPacketData.IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeTagNull() {
                return this.IsNull(this.tableSendPacketData.CodeTagColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeTagNull() {
                this[this.tableSendPacketData.CodeTagColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsByteNoNull() {
                return this.IsNull(this.tableSendPacketData.ByteNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetByteNoNull() {
                this[this.tableSendPacketData.ByteNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSendPacketData.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSendPacketData.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataTagNull() {
                return this.IsNull(this.tableSendPacketData.DataTagColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataTagNull() {
                this[this.tableSendPacketData.DataTagColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResponsePacketDataRow : System.Data.DataRow {
            
            private ResponsePacketDataDataTable tableResponsePacketData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResponsePacketDataRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResponsePacketData = ((ResponsePacketDataDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    try {
                        return ((int)(this[this.tableResponsePacketData.IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Id\' in table \'ResponsePacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResponsePacketData.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CodeTag {
                get {
                    try {
                        return ((string)(this[this.tableResponsePacketData.CodeTagColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CodeTag\' in table \'ResponsePacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResponsePacketData.CodeTagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ByteNo {
                get {
                    try {
                        return ((int)(this[this.tableResponsePacketData.ByteNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ByteNo\' in table \'ResponsePacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResponsePacketData.ByteNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableResponsePacketData.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ResponsePacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResponsePacketData.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataTag {
                get {
                    try {
                        return ((string)(this[this.tableResponsePacketData.DataTagColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataTag\' in table \'ResponsePacketData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResponsePacketData.DataTagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableResponsePacketData.IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableResponsePacketData.IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeTagNull() {
                return this.IsNull(this.tableResponsePacketData.CodeTagColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeTagNull() {
                this[this.tableResponsePacketData.CodeTagColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsByteNoNull() {
                return this.IsNull(this.tableResponsePacketData.ByteNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetByteNoNull() {
                this[this.tableResponsePacketData.ByteNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableResponsePacketData.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableResponsePacketData.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataTagNull() {
                return this.IsNull(this.tableResponsePacketData.DataTagColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataTagNull() {
                this[this.tableResponsePacketData.DataTagColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RS232ConfigRow : System.Data.DataRow {
            
            private RS232ConfigDataTable tableRS232Config;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RS232ConfigRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRS232Config = ((RS232ConfigDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Port {
                get {
                    try {
                        return ((string)(this[this.tableRS232Config.PortColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Port\' in table \'RS232Config\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRS232Config.PortColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Baud {
                get {
                    try {
                        return ((string)(this[this.tableRS232Config.BaudColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Baud\' in table \'RS232Config\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRS232Config.BaudColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataBits {
                get {
                    try {
                        return ((int)(this[this.tableRS232Config.DataBitsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataBits\' in table \'RS232Config\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRS232Config.DataBitsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StopBits {
                get {
                    try {
                        return ((string)(this[this.tableRS232Config.StopBitsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StopBits\' in table \'RS232Config\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRS232Config.StopBitsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parity {
                get {
                    try {
                        return ((string)(this[this.tableRS232Config.ParityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Parity\' in table \'RS232Config\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRS232Config.ParityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResponseDelay {
                get {
                    try {
                        return ((string)(this[this.tableRS232Config.ResponseDelayColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ResponseDelay\' in table \'RS232Config\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRS232Config.ResponseDelayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InterCharGap {
                get {
                    try {
                        return ((string)(this[this.tableRS232Config.InterCharGapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InterCharGap\' in table \'RS232Config\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRS232Config.InterCharGapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PollingInterval {
                get {
                    try {
                        return ((string)(this[this.tableRS232Config.PollingIntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PollingInterval\' in table \'RS232Config\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRS232Config.PollingIntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortNull() {
                return this.IsNull(this.tableRS232Config.PortColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortNull() {
                this[this.tableRS232Config.PortColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaudNull() {
                return this.IsNull(this.tableRS232Config.BaudColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaudNull() {
                this[this.tableRS232Config.BaudColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataBitsNull() {
                return this.IsNull(this.tableRS232Config.DataBitsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataBitsNull() {
                this[this.tableRS232Config.DataBitsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopBitsNull() {
                return this.IsNull(this.tableRS232Config.StopBitsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopBitsNull() {
                this[this.tableRS232Config.StopBitsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParityNull() {
                return this.IsNull(this.tableRS232Config.ParityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParityNull() {
                this[this.tableRS232Config.ParityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponseDelayNull() {
                return this.IsNull(this.tableRS232Config.ResponseDelayColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponseDelayNull() {
                this[this.tableRS232Config.ResponseDelayColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterCharGapNull() {
                return this.IsNull(this.tableRS232Config.InterCharGapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterCharGapNull() {
                this[this.tableRS232Config.InterCharGapColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPollingIntervalNull() {
                return this.IsNull(this.tableRS232Config.PollingIntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPollingIntervalNull() {
                this[this.tableRS232Config.PollingIntervalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VersionRow : System.Data.DataRow {
            
            private VersionDataTable tableVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VersionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVersion = ((VersionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Version {
                get {
                    try {
                        return ((string)(this[this.tableVersion.VersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Version\' in table \'Version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVersion.VersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionNull() {
                return this.IsNull(this.tableVersion.VersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionNull() {
                this[this.tableVersion.VersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PollingQRow : System.Data.DataRow {
            
            private PollingQDataTable tablePollingQ;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PollingQRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePollingQ = ((PollingQDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data {
                get {
                    try {
                        return ((string)(this[this.tablePollingQ.DataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Data\' in table \'PollingQ\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePollingQ.DataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataNull() {
                return this.IsNull(this.tablePollingQ.DataColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataNull() {
                this[this.tablePollingQ.DataColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ShortCutButtonRow : System.Data.DataRow {
            
            private ShortCutButtonDataTable tableShortCutButton;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ShortCutButtonRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableShortCutButton = ((ShortCutButtonDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ButtonId {
                get {
                    try {
                        return ((int)(this[this.tableShortCutButton.ButtonIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ButtonId\' in table \'ShortCutButton\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShortCutButton.ButtonIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ButtonText {
                get {
                    try {
                        return ((string)(this[this.tableShortCutButton.ButtonTextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ButtonText\' in table \'ShortCutButton\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShortCutButton.ButtonTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data {
                get {
                    try {
                        return ((string)(this[this.tableShortCutButton.DataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Data\' in table \'ShortCutButton\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShortCutButton.DataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsButtonIdNull() {
                return this.IsNull(this.tableShortCutButton.ButtonIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetButtonIdNull() {
                this[this.tableShortCutButton.ButtonIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsButtonTextNull() {
                return this.IsNull(this.tableShortCutButton.ButtonTextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetButtonTextNull() {
                this[this.tableShortCutButton.ButtonTextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataNull() {
                return this.IsNull(this.tableShortCutButton.DataColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataNull() {
                this[this.tableShortCutButton.DataColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeviceRowChangeEvent : System.EventArgs {
            
            private DeviceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRowChangeEvent(DeviceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SendPacketDataRowChangeEvent : System.EventArgs {
            
            private SendPacketDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SendPacketDataRowChangeEvent(SendPacketDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SendPacketDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResponsePacketDataRowChangeEvent : System.EventArgs {
            
            private ResponsePacketDataRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsePacketDataRowChangeEvent(ResponsePacketDataRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsePacketDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RS232ConfigRowChangeEvent : System.EventArgs {
            
            private RS232ConfigRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RS232ConfigRowChangeEvent(RS232ConfigRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RS232ConfigRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VersionRowChangeEvent : System.EventArgs {
            
            private VersionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersionRowChangeEvent(VersionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VersionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PollingQRowChangeEvent : System.EventArgs {
            
            private PollingQRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PollingQRowChangeEvent(PollingQRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PollingQRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ShortCutButtonRowChangeEvent : System.EventArgs {
            
            private ShortCutButtonRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShortCutButtonRowChangeEvent(ShortCutButtonRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ShortCutButtonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591